// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`render should not render title if name is not set 1`] = `<section />`;

exports[`render should render section 1`] = `
<section>
  <SectionHeading
    depth={3}
    id="foo"
    slotName="sectionToolbar"
    slotProps={
      Object {
        "classes": Object {},
        "components": <Components
          components={Array []}
          depth={3}
          exampleMode="collapse"
          usageMode="collapse"
        />,
        "content": <Examples
          exampleMode="collapse"
          examples={
            Array [
              Object {
                "content": 
<button>
  OK
</button>
,
                "evalInContext": [Function],
                "type": "code",
              },
              Object {
                "content": "Hello *world*!",
                "type": "markdown",
              },
            ]
          }
          name="Foo"
        />,
        "depth": 3,
        "name": "Foo",
        "sections": <Sections
          depth={3}
          sections={Array []}
        />,
        "slug": "foo",
      }
    }
  >
    Foo
  </SectionHeading>
  <Examples
    exampleMode="collapse"
    examples={
      Array [
        Object {
          "content": 
<button>
  OK
</button>
,
          "evalInContext": [Function],
          "type": "code",
        },
        Object {
          "content": "Hello *world*!",
          "type": "markdown",
        },
      ]
    }
    name="Foo"
  />
  <Sections
    depth={3}
    sections={Array []}
  />
  <Components
    components={Array []}
    depth={3}
    exampleMode="collapse"
    usageMode="collapse"
  />
</section>
`;

exports[`render should render title if name is set 1`] = `
<section>
  <SectionHeading
    depth={3}
    id="test"
    slotName="sectionToolbar"
    slotProps={
      Object {
        "classes": Object {},
        "depth": 3,
        "name": "test",
        "slug": "test",
      }
    }
  >
    test
  </SectionHeading>
</section>
`;

exports[`should not render components list if not defined 1`] = `
<Styled(Section)
  depth={3}
  isolated={false}
  name="No components"
  pagePerSection={false}
  slug="no-components"
/>
`;

exports[`should not render sections if not defined 1`] = `
<Styled(Section)
  depth={3}
  isolated={false}
  name="No sections"
  pagePerSection={false}
  slug="no-sections"
/>
`;

exports[`should render components list 1`] = `
<Styled(Section)
  components={
    <Components
      components={Array []}
      depth={4}
      exampleMode="collapse"
      usageMode="collapse"
    />
  }
  depth={3}
  isolated={false}
  name="Components"
  pagePerSection={false}
  slug="components"
/>
`;

exports[`should render section renderer 1`] = `
<Styled(Section)
  components={
    <Components
      components={Array []}
      depth={4}
      exampleMode="collapse"
      usageMode="collapse"
    />
  }
  content={
    <Examples
      exampleMode="collapse"
      examples={
        Array [
          Object {
            "content": 
<button>
  OK
</button>
,
            "evalInContext": [Function],
            "type": "code",
          },
          Object {
            "content": "Hello *world*!",
            "type": "markdown",
          },
        ]
      }
      name="Foo"
    />
  }
  depth={3}
  description="This is a description"
  isolated={false}
  name="Foo"
  pagePerSection={false}
  sections={
    <Sections
      depth={4}
      sections={Array []}
    />
  }
  slug="foo"
/>
`;

exports[`should render sections if defined 1`] = `
<Styled(Section)
  depth={3}
  isolated={false}
  name="Nested sections"
  pagePerSection={false}
  sections={
    <Sections
      depth={4}
      sections={Array []}
    />
  }
  slug="nested-sections"
/>
`;
